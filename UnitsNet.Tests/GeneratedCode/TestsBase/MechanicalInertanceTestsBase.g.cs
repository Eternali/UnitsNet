//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MechanicalInertance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MechanicalInertanceTestsBase : QuantityTestsBase
    {
        protected abstract double KilogramsForcePerMeterPerSecondSquaredInOneNewtonPerMeterPerSecondSquared { get; }
        protected abstract double NewtonsPerMeterPerSecondSquaredInOneNewtonPerMeterPerSecondSquared { get; }
        protected abstract double PoundsForcePerGInOneNewtonPerMeterPerSecondSquared { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilogramsForcePerMeterPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerMeterPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerGTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MechanicalInertanceUnit unit)
        {
            return unit switch
            {
                MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared => (KilogramsForcePerMeterPerSecondSquaredInOneNewtonPerMeterPerSecondSquared, KilogramsForcePerMeterPerSecondSquaredTolerance),
                MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared => (NewtonsPerMeterPerSecondSquaredInOneNewtonPerMeterPerSecondSquared, NewtonsPerMeterPerSecondSquaredTolerance),
                MechanicalInertanceUnit.PoundForcePerG => (PoundsForcePerGInOneNewtonPerMeterPerSecondSquared, PoundsForcePerGTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared },
            new object[] { MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared },
            new object[] { MechanicalInertanceUnit.PoundForcePerG },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MechanicalInertance();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MechanicalInertance(double.PositiveInfinity, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared));
            Assert.Throws<ArgumentException>(() => new MechanicalInertance(double.NegativeInfinity, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MechanicalInertance(double.NaN, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MechanicalInertance(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new MechanicalInertance(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (MechanicalInertance) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void MechanicalInertance_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new MechanicalInertance(1, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared);

            QuantityInfo<MechanicalInertanceUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(MechanicalInertance.Zero, quantityInfo.Zero);
            Assert.Equal("MechanicalInertance", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<MechanicalInertanceUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void NewtonPerMeterPerSecondSquaredToMechanicalInertanceUnits()
        {
            MechanicalInertance newtonpermeterpersecondsquared = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1);
            AssertEx.EqualTolerance(KilogramsForcePerMeterPerSecondSquaredInOneNewtonPerMeterPerSecondSquared, newtonpermeterpersecondsquared.KilogramsForcePerMeterPerSecondSquared, KilogramsForcePerMeterPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(NewtonsPerMeterPerSecondSquaredInOneNewtonPerMeterPerSecondSquared, newtonpermeterpersecondsquared.NewtonsPerMeterPerSecondSquared, NewtonsPerMeterPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(PoundsForcePerGInOneNewtonPerMeterPerSecondSquared, newtonpermeterpersecondsquared.PoundsForcePerG, PoundsForcePerGTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MechanicalInertance.From(1, MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared);
            AssertEx.EqualTolerance(1, quantity00.KilogramsForcePerMeterPerSecondSquared, KilogramsForcePerMeterPerSecondSquaredTolerance);
            Assert.Equal(MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared, quantity00.Unit);

            var quantity01 = MechanicalInertance.From(1, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared);
            AssertEx.EqualTolerance(1, quantity01.NewtonsPerMeterPerSecondSquared, NewtonsPerMeterPerSecondSquaredTolerance);
            Assert.Equal(MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared, quantity01.Unit);

            var quantity02 = MechanicalInertance.From(1, MechanicalInertanceUnit.PoundForcePerG);
            AssertEx.EqualTolerance(1, quantity02.PoundsForcePerG, PoundsForcePerGTolerance);
            Assert.Equal(MechanicalInertanceUnit.PoundForcePerG, quantity02.Unit);

        }

        [Fact]
        public void FromNewtonsPerMeterPerSecondSquared_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(double.NegativeInfinity));
        }

        [Fact]
        public void FromNewtonsPerMeterPerSecondSquared_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(double.NaN));
        }

        [Fact]
        public void As()
        {
            var newtonpermeterpersecondsquared = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1);
            AssertEx.EqualTolerance(KilogramsForcePerMeterPerSecondSquaredInOneNewtonPerMeterPerSecondSquared, newtonpermeterpersecondsquared.As(MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared), KilogramsForcePerMeterPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(NewtonsPerMeterPerSecondSquaredInOneNewtonPerMeterPerSecondSquared, newtonpermeterpersecondsquared.As(MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared), NewtonsPerMeterPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(PoundsForcePerGInOneNewtonPerMeterPerSecondSquared, newtonpermeterpersecondsquared.As(MechanicalInertanceUnit.PoundForcePerG), PoundsForcePerGTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MechanicalInertance(value: 1, unit: MechanicalInertance.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = Convert.ToDouble(AsWithSIUnitSystem());
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = MechanicalInertance.Parse("1 kgf/(m/sÂ²)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramsForcePerMeterPerSecondSquared, KilogramsForcePerMeterPerSecondSquaredTolerance);
                Assert.Equal(MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MechanicalInertance.Parse("1 N/(m/sÂ²)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonsPerMeterPerSecondSquared, NewtonsPerMeterPerSecondSquaredTolerance);
                Assert.Equal(MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MechanicalInertance.Parse("1 lbf/G", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsForcePerG, PoundsForcePerGTolerance);
                Assert.Equal(MechanicalInertanceUnit.PoundForcePerG, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(MechanicalInertance.TryParse("1 kgf/(m/sÂ²)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsForcePerMeterPerSecondSquared, KilogramsForcePerMeterPerSecondSquaredTolerance);
                Assert.Equal(MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(MechanicalInertance.TryParse("1 N/(m/sÂ²)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonsPerMeterPerSecondSquared, NewtonsPerMeterPerSecondSquaredTolerance);
                Assert.Equal(MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared, parsed.Unit);
            }

            {
                Assert.True(MechanicalInertance.TryParse("1 lbf/G", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsForcePerG, PoundsForcePerGTolerance);
                Assert.Equal(MechanicalInertanceUnit.PoundForcePerG, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = MechanicalInertance.ParseUnit("kgf/(m/sÂ²)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MechanicalInertance.ParseUnit("N/(m/sÂ²)", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = MechanicalInertance.ParseUnit("lbf/G", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(MechanicalInertanceUnit.PoundForcePerG, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(MechanicalInertance.TryParseUnit("kgf/(m/sÂ²)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(MechanicalInertance.TryParseUnit("N/(m/sÂ²)", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared, parsedUnit);
            }

            {
                Assert.True(MechanicalInertance.TryParseUnit("lbf/G", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(MechanicalInertanceUnit.PoundForcePerG, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MechanicalInertanceUnit unit)
        {
            var inBaseUnits = MechanicalInertance.From(1.0, MechanicalInertance.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MechanicalInertanceUnit unit)
        {
            var quantity = MechanicalInertance.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MechanicalInertanceUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = MechanicalInertance.Units.First(u => u != MechanicalInertance.BaseUnit);

            var quantity = MechanicalInertance.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(MechanicalInertanceUnit unit)
        {
            var quantity = default(MechanicalInertance);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MechanicalInertance newtonpermeterpersecondsquared = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1);
            AssertEx.EqualTolerance(1, MechanicalInertance.FromKilogramsForcePerMeterPerSecondSquared(newtonpermeterpersecondsquared.KilogramsForcePerMeterPerSecondSquared).NewtonsPerMeterPerSecondSquared, KilogramsForcePerMeterPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(newtonpermeterpersecondsquared.NewtonsPerMeterPerSecondSquared).NewtonsPerMeterPerSecondSquared, NewtonsPerMeterPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, MechanicalInertance.FromPoundsForcePerG(newtonpermeterpersecondsquared.PoundsForcePerG).NewtonsPerMeterPerSecondSquared, PoundsForcePerGTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MechanicalInertance v = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1);
            AssertEx.EqualTolerance(-1, -v.NewtonsPerMeterPerSecondSquared, NewtonsPerMeterPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(2, (MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(3)-v).NewtonsPerMeterPerSecondSquared, NewtonsPerMeterPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonsPerMeterPerSecondSquared, NewtonsPerMeterPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonsPerMeterPerSecondSquared, NewtonsPerMeterPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonsPerMeterPerSecondSquared, NewtonsPerMeterPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(2, (MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(10)/5).NewtonsPerMeterPerSecondSquared, NewtonsPerMeterPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(2, MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(10)/MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(5), NewtonsPerMeterPerSecondSquaredTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MechanicalInertance oneNewtonPerMeterPerSecondSquared = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1);
            MechanicalInertance twoNewtonsPerMeterPerSecondSquared = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(2);

            Assert.True(oneNewtonPerMeterPerSecondSquared < twoNewtonsPerMeterPerSecondSquared);
            Assert.True(oneNewtonPerMeterPerSecondSquared <= twoNewtonsPerMeterPerSecondSquared);
            Assert.True(twoNewtonsPerMeterPerSecondSquared > oneNewtonPerMeterPerSecondSquared);
            Assert.True(twoNewtonsPerMeterPerSecondSquared >= oneNewtonPerMeterPerSecondSquared);

            Assert.False(oneNewtonPerMeterPerSecondSquared > twoNewtonsPerMeterPerSecondSquared);
            Assert.False(oneNewtonPerMeterPerSecondSquared >= twoNewtonsPerMeterPerSecondSquared);
            Assert.False(twoNewtonsPerMeterPerSecondSquared < oneNewtonPerMeterPerSecondSquared);
            Assert.False(twoNewtonsPerMeterPerSecondSquared <= oneNewtonPerMeterPerSecondSquared);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MechanicalInertance newtonpermeterpersecondsquared = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1);
            Assert.Equal(0, newtonpermeterpersecondsquared.CompareTo(newtonpermeterpersecondsquared));
            Assert.True(newtonpermeterpersecondsquared.CompareTo(MechanicalInertance.Zero) > 0);
            Assert.True(MechanicalInertance.Zero.CompareTo(newtonpermeterpersecondsquared) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MechanicalInertance newtonpermeterpersecondsquared = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1);
            Assert.Throws<ArgumentException>(() => newtonpermeterpersecondsquared.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MechanicalInertance newtonpermeterpersecondsquared = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1);
            Assert.Throws<ArgumentNullException>(() => newtonpermeterpersecondsquared.CompareTo(null));
        }

        [Theory]
        [InlineData(1, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared, 1, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared, true)]  // Same value and unit.
        [InlineData(1, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared, 2, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared, false)] // Different value.
        [InlineData(2, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared, 1, MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared, false)] // Different value and unit.
        [InlineData(1, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared, 1, MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, MechanicalInertanceUnit unitA, double valueB, MechanicalInertanceUnit unitB, bool expectEqual)
        {
            var a = new MechanicalInertance(valueA, unitA);
            var b = new MechanicalInertance(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = MechanicalInertance.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1);
            Assert.True(v.Equals(MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1), NewtonsPerMeterPerSecondSquaredTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(MechanicalInertance.Zero, NewtonsPerMeterPerSecondSquaredTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MechanicalInertance newtonpermeterpersecondsquared = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1);
            Assert.False(newtonpermeterpersecondsquared.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MechanicalInertance newtonpermeterpersecondsquared = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1);
            Assert.False(newtonpermeterpersecondsquared.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MechanicalInertanceUnit)).Cast<MechanicalInertanceUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MechanicalInertance.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 kgf/(m/sÂ²)", new MechanicalInertance(1, MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared).ToString());
                Assert.Equal("1 N/(m/sÂ²)", new MechanicalInertance(1, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared).ToString());
                Assert.Equal("1 lbf/G", new MechanicalInertance(1, MechanicalInertanceUnit.PoundForcePerG).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kgf/(m/sÂ²)", new MechanicalInertance(1, MechanicalInertanceUnit.KilogramForcePerMeterPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 N/(m/sÂ²)", new MechanicalInertance(1, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 lbf/G", new MechanicalInertance(1, MechanicalInertanceUnit.PoundForcePerG).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 N/(m/sÂ²)", new MechanicalInertance(0.123456, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared).ToString("s1"));
                Assert.Equal("0.12 N/(m/sÂ²)", new MechanicalInertance(0.123456, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared).ToString("s2"));
                Assert.Equal("0.123 N/(m/sÂ²)", new MechanicalInertance(0.123456, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared).ToString("s3"));
                Assert.Equal("0.1235 N/(m/sÂ²)", new MechanicalInertance(0.123456, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 N/(m/sÂ²)", new MechanicalInertance(0.123456, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared).ToString("s1", culture));
            Assert.Equal("0.12 N/(m/sÂ²)", new MechanicalInertance(0.123456, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared).ToString("s2", culture));
            Assert.Equal("0.123 N/(m/sÂ²)", new MechanicalInertance(0.123456, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared).ToString("s3", culture));
            Assert.Equal("0.1235 N/(m/sÂ²)", new MechanicalInertance(0.123456, MechanicalInertanceUnit.NewtonPerMeterPerSecondSquared).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(MechanicalInertance)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(MechanicalInertanceUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal(MechanicalInertance.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal(MechanicalInertance.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(1.0);
            Assert.Equal(new {MechanicalInertance.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(value);
            Assert.Equal(MechanicalInertance.FromNewtonsPerMeterPerSecondSquared(-value), -quantity);
        }
    }
}
